
+ Introducing the UniCC parser generator +

++ Welcome to UniCC! ++

UniCC, standing as an acronym for //universal compiler-compiler//, is a powerful parser generator and language development system for computer professionals. Its design-goal is to serve as an all-round tool for both design and building. It should assist compiler-writers in any parsing-related task, including production-quality compiler construction and the implementation of domains specific languages.

**Flexible grammar prototyping and parser definition**

UniCC unions both a generator for lexical analyzers and a parser generator into one handy software solution. The programming interface of UniCC is an easy-to-use, extended Backus-Naur-Form-based grammar definition language. This language gives the compiler-developer's task much more comfort and simplicity in implementing parsers than ever before.

This grammar definition language comes with useful features for grammar prototyping, parser optimization, semantic augmentation and semantic programming. Lexical symbols can be directly defined within productions, right-hand side items can be referenced by meaningful names within semantic actions, instead of only their offsets. Features like virtual- and embedded-productions finally help to rapidly build-up iterative and optional grammatical structures. Standard features like automatic conflict resolution, terminal and production precedence association, state compression as well as parser trace and behavior modification trough semantic actions are self-evident.

**Lexical analysis on a context-free level**

By default, UniCC constructs whitespace-sensitive parsers. This paradigm is a speciality of UniCC and causes an internal revision of the grammar according to rules that match whitespace only under certain circumstances. In this case, the whitespace handling will be performed by the parser rather than the lexer, enabling to use the entire power of a context-free grammar for creating complex token structures or whitespace constructs. If this feature is not required by a grammar, it can be switched off, resulting in smaller parse tables and faster parsers.

**One parser generator, multiple targets**

By design, UniCC serves as a target language independent parser generator. Therefore, it is not bound or limited to emit parsers written in one special kind of target programming language. For now, UniCC fully supports C and Python as target languages. More targets are planned. Support for new or different target programming languages can be done with minimal effort, because every code generation target is specified in an XML-based template file which can easily be adapted for other languages.

Next to emitting parsers in a particular programming language, UniCC also offers the possibility to export all the grammar information, the parse tables, lexical recognizers, semantic actions and settings extracted from a UniCC parser definition into an independent, XML-based output format that can be handled by any individual subsequent tasks or module, like optimizing code-generators, analyzers, or direct parser interpreters.

@NEWPAGE@

++ The intention behind UniCC ++

The UniCC Parser Generator has its origin at //Phorward Software Technologies// and is initially written and maintained by //Jan Max Meyer//. Phorward Software Technologies is a one-man business from Dortmund, Germany, providing expertise in the area of parsing, compiler construction and systems programming.

The initial intention behind UniCC was the development of a high-portable solution for parsers developments that is flexible enough to fit many different demands and creates parsers that can be compiled and run on almost any platform.

The actually planned reference implementation for a UniCC-compiled parser was //RapidBATCH// version 6. RapidBATCH is a scripting language - formerly for Windows operating systems only - that was quite popular between 2001 and 2007. Due to the lack of time and some personal differences, RapidBATCH 6 sadly never came to an end, but it was reborn as an open source project in 2017. Nevertheless, UniCC and its underlying toolkit library //libphorward// was continued over the years, and is used in several proprietary software projects spreading over a wide array of platforms, including Linux, AIX, Solaris and Windows.

To get more information on Phorward Software Technologies and our projects and products, visit https://phorward.info on the web.

@NEWPAGE@

++ Some words on this manual ++

Parsing and compiler-construction is on of the most complex, on the first view tight-looking, but even fascinating and challenging topic of computer science. The knowledge and experience teached by this topic can be integrated into many software development issues of a programmer's everyday life and opens new possibilities and faster ways to success.

Some readers of this manual would have already taken some experience on this complex topic, maybe from a study on computer sciences, a business-related project that used some kind of programming or definition language or a private approach of writing a compiler for an domain-specific programming task. Rather others don't have any knowledge yet, but want to know how things work or require knowledge for an upcoming project.

The UniCC User Manual is - as it stands for - a user manual for the UniCC parser generator, and not a general textbook on compiler-construction. So this manual immediately starts into the topic of practical parsing, with the assistance of examples and the learning-by-doing principle. Deep knowledge on what's going on behind the grammars, how the parser internally works in detail and how it is constructed is not required or even covered here. But if there's more interest in these topics, e.g. language theories, parsing concepts, machine code generation and their optimization, or if generally deeper information on the topic of parsing and compiler construction is wanted, it is heavily recommended to read some adequate textbooks covering all these topics. This manual does only focus on the usage of UniCC itself, and how parsers are implemented with it.

Altought the UniCC parser generator comes with entirely target-language independent facilities, all programming-related examples in this manual are in the C programming language. The C standard template for the UniCC program module generator, which is delivered with the UniCC program package, is currently the only well-tested and proven parser framework for UniCC so far. In future, other implementation languages and frameworks will be made available by Phorward Software Technologies or by third-parties.

The UniCC User Manual is divided into four sections:

- The first section contains a quick start guide into parser development in assistance with UniCC. It is written in the style of a tutorial, and is advised to quickly begin using UniCC and to become familar with the UniCC parser definition language. Authoring of this section has been started already a few years ago during earlier development stages of UniCC, so this is the reason why it is not up-to-date with all the technical possibilities UniCC provides right now. But it's a good place to start. The goal of this quick start guide is the implementation of a small programming language compiler, called //xpl//.
- The second section is the UniCC reference guide relating to the installation or build, the use of the UniCC command-line interface and the general features of UniCC.
- The third section directs to the grammar definition language and all its features in a detailed way for topic-based lookup. This chapter also includes practical examples and snippets on feature-related problems and their solutions.
- The fourth section provides information about the Standard C Parser Template delivered with the UniCC software package. It should be mostly attended by C programmers who want to develop parsers with UniCC targeting the C programming language. There will be more sections or separate manuals like this one for other target languages, e.g. C++ or Java, as soon as they are implemented and well tested.


Hopefully, this manual answers most of the questions coming up when UniCC shall become the workhorse of your upcoming project requiring a compiler or parser to be implemented. If not, don't be afraid to drop a mail or issue on https://github.com/phorward/unicc.

@NEWPAGE@
%!postproc(html) '¹' '<sup>1</sup>'

++ UniCC is free software! ++[free_software]

Since 2016 and version 1.1, UniCC, the parser generator, its build tools and its supported target language templates are released and distributed under the terms and conditions of the 3-clause BSD license. Everybody is permitted to obtain, use, copy, modify and share the program and its sourcecode freely and without any charges. Since 2017, the main development of UniCC is done on GitHub, where the sourcecode, a bug tracker, a wiki and more resources remain. The official URL is **https://github.com/phorward/unicc**. Since version 1.2 in 2017, all parts of UniCC, including the C parser template sources, the Python parser template and the minimal parser generator //min_lalr1// that is used for bootstrapping, are unioned into one single sourcecode repository. So no more partitioning of the sourcecodes is done anymore into several source repos, which was done before also for different licensing reasons.

The UniCC parser generator makes heavy use of the toolchain provided by the //Phorward Toolkit//, shortly also called //libphorward//. It is the base library and backend toolchain implementing much of the functionality¹ provided by UniCC. It is written in C, and especially the computations for the lexical analysis is done here. UniCC itself does all the stuff related to the parse table computation, grammar revision, code generation and finally the implementation of parsers working on the generated tables. libphorward is also released and distributed under the 3-clause BSD license, but developed separately from it. You can find its sourcecode, help and resources on GitHub at **https://github.com/phorward/phorward**

To build UniCC from its sourcecode, there is also an how-to guide about [how to build UniCC from source #ref_compile_from_source] within this manual. Any contribution to UniCC and its related tools and libraries, be it code, bugfixes, parser templates, ideas, enhancement proposals or documentation are always welcome. Help is also appreciated in form of support, advertising or just by using it.

Thank you!


---------------

¹ //libphorward// does also provide tools for parser construction and abstract syntax tree processing. These tools are currently in an unprecise development state, but maybe result as the source base for an upcoming UniCC version 2 in future.
