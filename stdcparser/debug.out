$ unicc -w debug.par
$ cc -o debug -DUNICC_DEBUG=1 -DUNICC_STACKDEBUG=1 debug.c
$ echo -n "1+2*3" | ./debug -s
debug: current token 7 (0-9)
debug: sym = 7 (0-9) [len = 1] tos->state = 0 act = reduce idx = 13
debug: Stack Dump: 0 
debug: << reducing by production 13 (&whitespace* -> )
debug: after reduction, shifting nonterminal 14 (&whitespace*)
debug: current token 7 (0-9)
debug: sym = 7 (0-9) [len = 1] tos->state = 2 act = shift idx = 7
debug: Stack Dump: 0 2 (&whitespace*) 
debug: >> shifting terminal 7 (0-9)
debug: << reducing by production 7 (integer -> '0-9')
debug: after reduction, shifting nonterminal 9 (integer)
debug: current token 1 (+)
debug: sym = 1 (+) [len = 1] tos->state = 3 act = reduce idx = 13
debug: Stack Dump: 0 2 (&whitespace*) 3 (integer) 
debug: << reducing by production 13 (&whitespace* -> )
debug: after reduction, shifting nonterminal 14 (&whitespace*)
debug: << reducing by production 20 (integer' -> integer &whitespace*)
debug: after reduction, shifting nonterminal 21 (integer')
debug: << reducing by production 6 (expression -> integer')
debug: after reduction, shifting nonterminal 11 (expression)
debug: current token 1 (+)
debug: sym = 1 (+) [len = 1] tos->state = 4 act = shift/reduce idx = 7
debug: Stack Dump: 0 2 (&whitespace*) 4 (expression) 
debug: >> shifting terminal 1 (+)
debug: current token 7 (0-9)
debug: sym = 7 (0-9) [len = 1] tos->state = 7 act = reduce idx = 13
debug: Stack Dump: 0 2 (&whitespace*) 4 (expression) 7 (+) 
debug: << reducing by production 13 (&whitespace* -> )
debug: after reduction, shifting nonterminal 14 (&whitespace*)
debug: << reducing by production 14 (+' -> '+' &whitespace*)
debug: after reduction, shifting nonterminal 15 (+')
debug: current token 7 (0-9)
debug: sym = 7 (0-9) [len = 1] tos->state = 10 act = shift idx = 7
debug: Stack Dump: 0 2 (&whitespace*) 4 (expression) 10 (+') 
debug: >> shifting terminal 7 (0-9)
debug: << reducing by production 7 (integer -> '0-9')
debug: after reduction, shifting nonterminal 9 (integer)
debug: current token 3 (*)
debug: sym = 3 (*) [len = 1] tos->state = 3 act = reduce idx = 13
debug: Stack Dump: 0 2 (&whitespace*) 4 (expression) 10 (+') 3 (integer) 
debug: << reducing by production 13 (&whitespace* -> )
debug: after reduction, shifting nonterminal 14 (&whitespace*)
debug: << reducing by production 20 (integer' -> integer &whitespace*)
debug: after reduction, shifting nonterminal 21 (integer')
debug: << reducing by production 6 (expression -> integer')
debug: after reduction, shifting nonterminal 11 (expression)
debug: current token 3 (*)
debug: sym = 3 (*) [len = 1] tos->state = 16 act = shift/reduce idx = 9
debug: Stack Dump: 0 2 (&whitespace*) 4 (expression) 10 (+') 16 (expression) 
debug: >> shifting terminal 3 (*)
debug: current token 7 (0-9)
debug: sym = 7 (0-9) [len = 1] tos->state = 9 act = reduce idx = 13
debug: Stack Dump: 0 2 (&whitespace*) 4 (expression) 10 (+') 16 (expression) 9 (*) 
debug: << reducing by production 13 (&whitespace* -> )
debug: after reduction, shifting nonterminal 14 (&whitespace*)
debug: << reducing by production 16 (*' -> '*' &whitespace*)
debug: after reduction, shifting nonterminal 17 (*')
debug: current token 7 (0-9)
debug: sym = 7 (0-9) [len = 1] tos->state = 13 act = shift idx = 7
debug: Stack Dump: 0 2 (&whitespace*) 4 (expression) 10 (+') 16 (expression) 13 (*') 
debug: >> shifting terminal 7 (0-9)
debug: << reducing by production 7 (integer -> '0-9')
debug: after reduction, shifting nonterminal 9 (integer)
debug: current token 8 (&eof)
debug: sym = 8 (&eof) [len = 0] tos->state = 3 act = reduce idx = 13
debug: Stack Dump: 0 2 (&whitespace*) 4 (expression) 10 (+') 16 (expression) 13 (*') 3 (integer) 
debug: << reducing by production 13 (&whitespace* -> )
debug: after reduction, shifting nonterminal 14 (&whitespace*)
debug: << reducing by production 20 (integer' -> integer &whitespace*)
debug: after reduction, shifting nonterminal 21 (integer')
debug: << reducing by production 6 (expression -> integer')
debug: after reduction, shifting nonterminal 11 (expression)
debug: current token 8 (&eof)
debug: sym = 8 (&eof) [len = 0] tos->state = 18 act = reduce idx = 3
debug: Stack Dump: 0 2 (&whitespace*) 4 (expression) 10 (+') 16 (expression) 13 (*') 18 (expression) 
debug: << reducing by production 3 (expression -> expression *' expression)
debug: after reduction, shifting nonterminal 11 (expression)
debug: current token 8 (&eof)
debug: sym = 8 (&eof) [len = 0] tos->state = 16 act = reduce idx = 1
debug: Stack Dump: 0 2 (&whitespace*) 4 (expression) 10 (+') 16 (expression) 
debug: << reducing by production 1 (expression -> expression +' expression)
debug: after reduction, shifting nonterminal 11 (expression)
debug: current token 8 (&eof)
debug: sym = 8 (&eof) [len = 0] tos->state = 4 act = shift idx = 0
debug: Stack Dump: 0 2 (&whitespace*) 4 (expression) 
debug: >> shifting terminal 8 (&eof)
debug: << reducing by production 0 (calculator -> expression ~&eof)
debug: after reduction, shifting nonterminal 10 (calculator)
debug: << reducing by production 21 (calculator' -> &whitespace* calculator)
debug: goal symbol reduced, exiting parser
debug: parse completed with 0 errors
= 7
$ 
