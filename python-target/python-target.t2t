
+ Python parser target +[pythonparser]

This part of the manual relates to the shipped Python parser target, version 0.3, and higher.

%-------------------------------------------------------------------------------
%-------------------------------------------------------------------------------
%-------------------------------------------------------------------------------

++ Overview ++

The Python target enables UniCC target code generation support for the Python programming language (https://python.org).

The target has been implemented in 2017 when UniCC was internally revised. Since version 0.3 shipped with UniCC v1.3, it runs stable and already supports features for abstract syntax tree generation and traversal.

Generated parsers in the Python target mostly behave like parsers for the C target. They use the same algorithms for input caching, so that characters are requested only once from the input source. Input source can be anything that emits characters.

%-------------------------------------------------------------------------------
%-------------------------------------------------------------------------------
%-------------------------------------------------------------------------------

++ Features ++

Parsers generated by the Python target so far provide

- Support for Python 2 and 3
- No dependencies on any third-party library
- Thread-safe, parsers can recursively be called
- Automatic construction of an AST data structure when [abstract syntax tree notation #ref_ast] is provided
- Provides a default parser test environment if no semantic code is given
- Dynamic end-of-file behavior
-

Error recovery is currently not implemented.

%-------------------------------------------------------------------------------
%-------------------------------------------------------------------------------
%-------------------------------------------------------------------------------

++ Contributions ++

Any contributions to the parser target are welcome. Contributions can be sent to us, so we will integrate them into the distribution version of UniCC and the standard template, if they are necessary and useful for everyone.

%-------------------------------------------------------------------------------
%-------------------------------------------------------------------------------
%-------------------------------------------------------------------------------

++ Example with semantic actions ++

The Python target is currently not covered in detail, so only a short example is presented. For now, it is important that the correct indention level is satisfied, which is a dependency for Python. The [AST notations #ref_ast] introduced with UniCC v1.3 and higher integrate perfectly with the Python target.

%!include: ``expr.py.par``

Compile and run it with

```
unicc expr.py.par
python expr.py.py
```

%-------------------------------------------------------------------------------
%-------------------------------------------------------------------------------
%-------------------------------------------------------------------------------

++ Classes ++

+++ @@prefixNode +++

This class defines an AST node.

``emit`` defines the emitted AST node name, ``match`` the string from the input. The member ``children`` is a list of child node objects.

+++ @@prefixParserControlBlock +++

Defines the parser control block, which saves any current state information of the parser.

+++ @@prefixParser +++

This is the main parser class.

Its only public function so far is ``@@prefixParser.parse()``, which requires an optional parameter defining the input. This parameter can either be of type //str// or //unicode//, or a callable that emits characters. This function is only called once.
